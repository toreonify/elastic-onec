#
# This file is part of the elastic-onec (https://github.com/toreonify/elastic-onec).
# Copyright (c) 2024 Ivan Korytov <toreonify@outlook.com>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
input {
  beats {
    port => 5044
  }
}

filter {
  if [event][dataset] == "onec.log" {
    # It will erase it from everywhere, even inside a comment
    mutate {
      gsub => [
        "message", "^1CV8LOG\(ver 2\.0\)\s+[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}\s*", ""
      ]
    }

    # If message contained only first three lines of a log file (header), drop it
    if [message] == "" {
      drop{}
    }

    # Get database UUID from log file path
    ruby {
      code => "event.set('[Database]', event.get('[log][file][path]').split('\\')[-3])"
    }

    # Split message to fields
    grok {
      match => {
        message => [
          '{%{DATESTAMP_EVENTLOG:Date},%{DATA:TransactionStatus},%{SPACE}{%{DATA:Transaction},%{DATA:TransactionStartOffset}},%{INT:UserId},%{INT:ComputerId},%{INT:ApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\"%{DATA:Comment}\",%{SPACE}%{INT:MetadataId},%{SPACE}{%{DATA:Data}},\"%{DATA:RepresentationData}\",%{INT:WorkServerId},%{INT:PrimaryPortId},%{INT:SecondaryPortId},%{INT:Session},%{INT:MoreMetadata},(%{INT:MoreMetadataId},)?%{SPACE}{%{DATA:SessionParameters}}'
        ]
      }
      remove_field => ["message", "[event][original]"]
    }

    if "_grokparsefailure" not in [tags] and "_groktimeout" not in [tags] {
      ruby {
        code => "event.set('@timestamp', LogStash::Timestamp.new(DateTime.strptime(event.get('[Date]') + event.get('[event][timezone]'), '%Y%m%d%H%M%S%z').iso8601))"
        remove_field => "Date"
      }

      mutate {
        replace => {
          "Data" => "{%{Data}}"
        }
      }

      translate {
        source => "TransactionStatus"
        target => "TransactionStatus"
        exact => true
        override => true
        dictionary => {
          "N" => "Отсутствует"
          "U" => "Зафиксирована"
          "R" => "Не завершена"
          "C" => "Отменена"
        }
      }

      translate {
        source => "Importance"
        target => "Importance"
        exact => true
        override => true
        dictionary => {
          "I" => "Информация"
          "E" => "Ошибка"
          "W" => "Предупреждение"
          "N" => "Примечание"
        }
      }

      # Map IDs to values
      ruby {
        path => "/etc/logstash/onec-translate.rb"
        remove_field => [
          "UserId", "ApplicationId", "ComputerId", "EventId", "MetadataId", "WorkServerId", "PrimaryPortId", "SecondaryPortId", "MoreMetadataId"
        ]
      }
    }
  }
}

output {
  if [event][dataset] == "onec.log" {
    elasticsearch {
      hosts => ["elastic:9200"]
      index => "onec-log"
      action => "create"
      user => "logstash_internal"
      password => "<password>"
    }
  }
}
